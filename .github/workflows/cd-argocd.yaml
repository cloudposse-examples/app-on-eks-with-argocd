name: CD â€” Deploy to Argo CD Environment

on:
  workflow_call:
    inputs:
      application:
        description: "Name of the application to deploy"
        required: true
        type: string
      environment:
        description: "Name of the environment to deploy to"
        required: true
        type: string
      namespace:
        description: "Namespace to deploy to"
        required: false
        type: string
      runs-on:
        description: "The runner labels on which jobs should run on"
        required: false
        type: string
        default: '["self-hosted", "common"]'
      image:
        description: "Docker Image to deploy"
        required: true
        type: string
      tag:
        description: "Docker Image tag to deploy"
        required: true
        type: string
      organization:
        description: "Repository owner organization (ex. acme for repo acme/example)"
        required: true
        type: string
      repository:
        description: "Repository name (ex. example for repo acme/example)"
        required: true
        type: string
      ref:
        description: "The fully-formed ref of the branch or tag that triggered the workflow run"
        required: true
        type: string
      toolchain:
        description: "Toolchain ('helm', 'helmfile')"
        required: false
        default: "helm"
        type: string
      path:
        description: "The path where lives the helmfile or helm chart."
        required: true
        type: string
      values_file:
        type: string
        description: Helmfile values file, or helm chart values file
        default: ""
        required: false
      synchronously:
        type: boolean
        description: "Wait until ArgoCD successfully apply the changes"
        default: false
      check-retry-count:
        type: string
        description: "Check retry count (for synchronously mode)"
        required: false
        default: "10"
      check-retry-interval:
        type: string
        description: "Check retry interval (in seconds) (for synchronously mode)"
        required: false
        default: "30"
      commit-retry-count:
        type: string
        description: "Commit retry count"
        required: false
        default: "4"
      commit-retry-interval:
        type: string
        description: "Commit retry interval (in seconds)"
        required: false
        default: "10"
      commit-timeout:
        type: string
        description: "Commit timeout (in seconds)"
        required: false
        default: "60"
      custom-deployment-url:
        type: string
        description: "Determines the URL to use for the deployment"
        default: ""
      helm-args:
        type: string
        description: "Additional helm arguments"
        required: false
        default: ""
      helm-version:
        description: "Helm version"
        required: false
        type: string
        default: "v3.18.6"
      helmfile-version:
        description: "Helmfile version"
        required: false
        type: string
        default: "v0.148.1"
      ecr-region:
        type: string
        description: "ECR AWS region. Required if `registry` points to ECR."
        required: false
        default: ""
      ecr-iam-role:
        type: string
        description: "IAM Role ARN provide ECR write/read access. Required if `registry` points to ECR."
        required: false
        default: ""
      actions-checkout-sparse-checkout-cone-mode:
        default: true
        type: boolean
        description: "set to false if your checking out files, or need legacy glob patterns like some_app/*/deploy"
      jobs-deploy-timeout-minutes:
        default: 60
        type: number

permissions:
  deployments: write
  id-token: write
  contents: read
  statuses: read

jobs:
  environment:
    uses: ./.github/workflows/controller-environment-interface.yaml
    with:
      runs-on: ${{ inputs.runs-on }}
      environment: ${{ inputs.environment }}
      namespace: ${{ inputs.namespace || inputs.environment }}

  deploy:
    timeout-minutes: ${{ inputs.jobs-deploy-timeout-minutes }}
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    needs: environment
    environment:
      name: ${{ needs.environment.outputs.environment }}
      url: ${{ steps.deploy-url.outputs.url }}
    env:
      ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
      ARTIFACTORY_PASS: ${{ secrets.ARTIFACTORY_PASS }}
    steps:
      # Credentials to Artifacts account
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        if: ${{ inputs.ecr-region != '' && inputs.ecr-iam-role != '' }}
        with:
          aws-region: ${{ inputs.ecr-region }}
          role-to-assume: ${{ inputs.ecr-iam-role }}

      - uses: azure/setup-helm@v4.2.0

      # Login to ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        if: ${{ inputs.ecr-region != '' && inputs.ecr-iam-role != '' }}

      # Fetch chart from OCI repository
      - name: Fetch Chart
        if: ${{ inputs.toolchain == 'helm' && contains(inputs.path, 'oci://') }}
        run: |
          helm pull ${{ inputs.path }} --untar --untardir /tmp/chart

      - name: Determine Chart name from OCI path
        if: ${{ inputs.toolchain == 'helm' && contains(inputs.path, 'oci://') }}
        id: chart-name
        env:
          CHART_PATH: ${{ inputs.path }}
        run: |
          echo "CHART=$(echo ${CHART_PATH##*/})" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: ${{ inputs.actions-checkout-sparse-checkout-cone-mode }}
          sparse-checkout: ${{ inputs.path }}

      - name: Helm Build
        if: ${{ inputs.toolchain == 'helm' }}
        run: |
          helm dependency build ${{ contains(inputs.path, 'oci://') && format('/tmp/chart/{0}', env.CHART ) || inputs.path }}

      # Configure AWS credentials for target environment (required for SSM)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: ${{ needs.environment.outputs.cluster_region }}
          role-to-assume: ${{ needs.environment.outputs.cluster_role }}

      - name: Generate GitHub App Token for Non-Prod
        if: ${{ needs.environment.outputs.is_prod != 'true' }}
        uses: actions/create-github-app-token@v1
        id: app-token-nonprod
        with:
          app-id: ${{ vars.ARGO_CD_DEPLOY_NONPROD_APP_ID }}
          private-key: ${{ secrets.ARGO_CD_DEPLOY_NONPROD_APP_PRIVATE_KEY }} # scoped to the given environment
          # The owner and repository must match the desired state repo
          owner: ${{ github.repository_owner }} # redundant but added for clarity
          repositories: |
            argocd-deploy-non-prod

      - name: Generate GitHub App Token for Prod
        if: ${{ needs.environment.outputs.is_prod == 'true' }}
        uses: actions/create-github-app-token@v1
        id: app-token-prod
        with:
          app-id: ${{ vars.ARGO_CD_DEPLOY_PROD_APP_ID }}
          private-key: ${{ secrets.ARGO_CD_DEPLOY_PROD_APP_PRIVATE_KEY }} # scoped to the given environment
          # The owner and repository must match the desired state repo
          owner: ${{ github.repository_owner }} # redundant but added for clarity
          repositories: |
            argocd-deploy-prod

      - name: Select App Token
        id: app-token
        run: |
          if [ "${{ needs.environment.outputs.is_prod }}" == "true" ]; then
            echo "token=${{ steps.app-token-prod.outputs.token }}" >> $GITHUB_OUTPUT
          else
            echo "token=${{ steps.app-token-nonprod.outputs.token }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy
        uses: cloudposse/github-action-deploy-argocd@v0.13.1
        id: deploy
        with:
          toolchain: ${{ inputs.toolchain }}
          synchronously: ${{ inputs.synchronously }}
          check-retry-count: ${{ inputs.check-retry-count }}
          check-retry-interval: ${{ inputs.check-retry-interval }}
          commit-retry-count: ${{ inputs.commit-retry-count }}
          commit-retry-interval: ${{ inputs.commit-retry-interval }}
          commit-timeout: ${{ inputs.commit-timeout }}
          path: ${{ (contains(inputs.path, 'oci://') && format('/tmp/chart/{0}', env.CHART )) || inputs.path }}
          values_file: ${{ format(inputs.values_file, steps.environment.outputs.name) }}
          application: ${{ inputs.application }}
          ssm-path: ${{ needs.environment.outputs.cluster_ssm_path }}
          aws-region: ${{ needs.environment.outputs.cluster_region }}
          cluster: ${{ needs.environment.outputs.cluster }}
          environment: ${{ needs.environment.outputs.environment }}
          namespace: ${{ needs.environment.outputs.namespace }}
          image: ${{ inputs.image }}
          image-tag: ${{ inputs.tag }}
          operation: deploy
          github-pat: ${{ steps.app-token.outputs.token }}
          commit-status-github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ inputs.organization }}/${{ inputs.repository }}
          ref: ${{ github.sha }}
          helm-args: ${{ inputs.helm-args }}
          helm-version: ${{ inputs.helm-version }}
          helm-file-version: ${{ inputs.helm-file-version }}

      - name: Deploy URL
        id: deploy-url
        uses: cloudposse/github-action-yaml-config-query@v1.0.0
        with:
          query: ."${{ inputs.custom-deployment-url == '' }}"
          config: |
            true:
              url: ${{ steps.deploy.outputs.webapp-url }}
            false:
              url: ${{ inputs.custom-deployment-url }}
