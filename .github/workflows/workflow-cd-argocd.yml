name: |-
  CD - Deploy to EKS with ArgoCD and Helmfile
  
  Deploy Docker image to EKS with ArgoCD and Helmfile
  
  ### Usage 
  
  ```yaml
    name: Deploy
    on:
      push:
        branches: [ main ]
  
    jobs:
      cd:
        uses: ./.github/workflows/workflow-cd-argocd.yml@main
        with:
          image: registry.hub.docker.com/library/nginx
          tag: latest
          repository: $\{\{ github.event.repository.name \}\}
          environment: dev
        secrets:
          secret-outputs-passphrase: $\{\{ secrets.secret-outputs-passphrase \}\}
          github-private-actions-pat: $\{\{ secrets.github-private-actions-pat \}\}
  ```

on:
  workflow_call:
    inputs:
      image:
        description: "Docker Image to deploy"
        required: true
        type: string
      tag:
        description: "Docker Image tag to deploy"
        required: true
        type: string
      organization:
        description: "Repository owner organization (ex. acme for repo acme/example)"
        required: true
        type: string
      repository:
        description: "Repository name (ex. example for repo acme/example)"
        required: true
        type: string
      environment:
        description: "Environment name deploy to"
        type: string
        required: true
      synchronously:
        type: boolean
        description: "Wait until ArgoCD successfully apply the changes"
        default: false
      check-retry-count:
        type: string
        description: 'Check retry count (for synchronously mode)'
        required: false
        default: "10"
      check-retry-interval:
        type: string
        description: 'Check retry interval (in seconds) (for synchronously mode)'
        required: false
        default: "30"
      toolchain:
        description: "Toolchain ('helm', 'helmfile')"
        required: false
        default: "helmfile"
        type: string
      path:
        description: "The path where lives the helmfile or helm chart."
        required: true
        type: string
      values_file:
        type: string
        description: Helmfile values file
        default: ''
        required: false
    secrets:
      secret-outputs-passphrase:
        description: "Passphrase to encrypt/decrypt secret outputs with gpg. For more information [read](https://github.com/cloudposse/github-action-secret-outputs)"
        required: true
      github-private-actions-pat:
        description: "Github PAT allow to pull private repos"
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.deploy.outputs.webapp-url }}
    steps:
      - uses: cloudposse/github-action-secret-outputs@0.1.1
        id: image
        with:
          secret: ${{ secrets.secret-outputs-passphrase }}
          op: decode
          in: ${{ inputs.image }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Environment Info
        uses: cloudposse/github-action-interface-environment@0.3.0
        id: environment
        with:
          implementation_repository: 'innovus-internal/infrastructure'
          implementation_path: '.github/environments/'
          implementation_file: 'eks-argocd.yaml'
          implementation_ref: 'feature/argo-environments'
          implementation_github_pat: ${{ secrets.github-private-actions-pat }}
          environment: ${{ inputs.environment }}
          namespace: ${{ inputs.environment }}
          repository: ${{ inputs.repository }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-region: ${{ steps.environment.outputs.region }}
          role-to-assume: ${{ steps.environment.outputs.role }}
          role-skip-session-tagging: true

      - name: Deploy
        uses: cloudposse/github-action-deploy-argocd@0.8.1
        id: deploy
        with:
          toolchain: ${{ inputs.toolchain }}
          path: ${{ inputs.path }}
          values_file: ${{ format(inputs.values_file, steps.environment.outputs.name) }}
          application: ${{ inputs.repository }}
          ssm-path: ${{ steps.environment.outputs.ssm-path }}
          aws-region: ${{ steps.environment.outputs.region }}
          cluster: ${{ steps.environment.outputs.cluster }}
          environment: ${{ steps.environment.outputs.name }}
          namespace: ${{ steps.environment.outputs.namespace }}
          image: ${{ steps.image.outputs.out }}
          image-tag: ${{ inputs.tag }}
          operation: deploy
          github-pat: ${{ secrets.github-private-actions-pat }}
          repository: ${{ inputs.organization }}/${{ inputs.repository }}
          ref: ${{ github.sha }}
          synchronously: ${{ inputs.synchronously }}
          check-retry-count: ${{ inputs.check-retry-count }}
          check-retry-interval: ${{ inputs.check-retry-interval }}
